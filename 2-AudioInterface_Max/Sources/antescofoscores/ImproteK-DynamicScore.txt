; Créer les proc dans une map pour pouvoir les manipuler sans nombre prédéterminé !!!!!
; $proc := MAP{}
; $proc.insert (3, ::SetVoice())
; Faire de même pour les SequenceImpro et les memorys du coup ?
; $Impro_sequences := MAP{}
; $Impro_voices := MAP{}
; $Param_voices := MAP{}


$printimproinfo := 1
;==================================================================================================================
;==================================================================================================================
; BLOC 1: GLOBAL VARIABLES
; Scenario of the current improvisation (used for segmenting and labeling), symbolic "impro" sequences
; Modified using "setvar" in Max, ou via OSC, dynamically or not
;==================================================================================================================
;==================================================================================================================
$Xfadeduration := 60
$audio_latency_online := 423
$audio_latency_offline := 0


$pulsed := 0
$play := 0

;----------------------------------------------------------------------------------------
; INITIALISATION OF THE SEQUENCES (SCENARIOS, SYMBOLIC IMPRO SEQUENCES) RECEIVED FROM MAX
;----------------------------------------------------------------------------------------
$online_memory := MAP{}

$Scenario := MAP{}
$SequenceImpro := MAP{} ; Each musical event in the MAP : tab [idx to play in the memory, transposition]
$SequenceImpro1 := MAP{}
$SequenceImpro2 := MAP{}
$SequenceImpro3 := MAP{} 
$length_scenario := 0
$last_length_scenario := 0



whenever ($length_scenario)
{
	@local $cpt
	
	$last_length_scenario := $length_scenario

	$cpt := 0
	loop BuildSequences 0
		{
			;Test Jamatrix : commenter remplissge par défaut
			; Default impro sequence before receiving a generated sequence
			$SequenceImpro := @add_pair($SequenceImpro,$cpt, tab[($cpt - 4),0])
			$SequenceImpro1 := @add_pair($SequenceImpro1,$cpt, tab[($cpt - 4),0])
			$SequenceImpro2 := @add_pair($SequenceImpro2,$cpt, tab[($cpt - 4),0])
			$SequenceImpro3 := @add_pair($SequenceImpro3,$cpt, tab[($cpt - 4),0])

			; Default scenario before receiving a loaded scenario
			$Scenario := @add_pair($Scenario,$cpt, "label")

			$cpt := $cpt + 1
		} until ( $cpt >= $length_scenario)
 
	if ($printimproinfo) 
		{
			printAnte global "______Sequences built for the 1st time______"
			printAnte global "$Scenario :" $Scenario 
			printAnte global "$SequenceImpro :" $SequenceImpro
		}

}


;==================================================================================================================
;==================================================================================================================
; BLOC 2: TIME SOURCES AND OTHER TEMPORAL MECHANISMS
;==================================================================================================================
;==================================================================================================================

; Time source driving the whole program.
; Internally modified when !$pulsed, coming from Max (metronome, beat tracker...) when pulsed.
$signal_new_position := -1

; Master position: tempo for memory annotation & segmentation
@tempovar $pos_in_scenario(120,1)
$tempovar_pos_in_scenario := 120
whenever ($tempovar_pos_in_scenario)
{
	let $pos_in_scenario.tempo := $tempovar_pos_in_scenario
	printAnte global "$pos_in_scenario.tempo = " ($pos_in_scenario.tempo)
}

$duration_current_master_event := 0
whenever ($duration_current_master_event == $duration_current_master_event)
{
	printAnte global "$duration_current_master_event = " $duration_current_master_event "EQ TEMPO =" (60000/$duration_current_master_event) 
}
whenever($pos_in_scenario == $pos_in_scenario)
{
	printAnte global "** FROM MAX : $pos_in_scenario = " $pos_in_scenario "("($NOW*1000)")"
}


; Local/slave position: tempo (if manual acceleration...)
@tempovar $pos_to_play(120,1)
$tempovar_pos_to_play := 120
whenever ($tempovar_pos_to_play)
{
	let $pos_to_play.tempo := $tempovar_pos_to_play
}

$mult_coeff_acc_tempo := 1
whenever ($mult_coeff_acc_tempo)
{
	let $pos_to_play.tempo := $mult_coeff_acc_tempo * ($pos_in_scenario.tempo)
	printAnte global "** FROM MAX : Mult. tempo $pos_to_play = " $mult_coeff_acc_tempo "("($NOW*1000)")"
}
whenever($pos_to_play == $pos_to_play)
{
	printAnte global "** FROM MAX : $pos_to_play = " $pos_to_play "("($NOW*1000)")"
}




;==================================================================================================================
;==================================================================================================================
; BLOC 3.1: DEFINITION OF THE FUNCTIONS CONTROLLING THE RENDERING OF AN EVENT
;==================================================================================================================
;==================================================================================================================
;ICI
@proc_def ::StartRenderEvent($VoiceName, $TimeMaster, $pulsed, $date_start_segment_in_memory, $date_end_segment_in_memory, $transpo, $position, $tempo, $activevoice, $audio_latency, $time_shift) 
	{

		@local $beatduration_in_memory, $speedratio
		@local $graincurvesduration_frac_beat, $graincurvesduration_in_memory, $Xfade_frac_beat, $Xfadeduration_in_memory, $date_end_Xfade_in_memory
		@local $voice, $output_audio
		@local $start_pos

		printAnte $VoiceName $VoiceName "STARTING RENDERING POSITION " $position "(dates: " $date_start_segment_in_memory $date_end_segment_in_memory ")"
		;printAnte $VoiceName $VoiceName "$TimeMaster = " $TimeMaster "$pulsed = " $pulsed "$tempo = " $tempo

		AnteToSVP $VoiceName transpo $transpo 

		;Current beat durations values
		$beatduration_in_memory := ($date_end_segment_in_memory - $date_start_segment_in_memory)
		if ($TimeMaster)
		{
			if($pulsed)
				{
					printAnte $VoiceName $VoiceName "$duration_current_master_event" $duration_current_master_event "-->" (60000/$tempo)
					$duration_current_master_event := 60000/$tempo
				}
			else {$duration_current_master_event := $beatduration_in_memory}
		}
		;faire un else pour temporalités multiples

		$speedratio := $beatduration_in_memory / $duration_current_master_event

		;Equivalent durations current tempo / tempo in the memory for Xfade
		$Xfade_frac_beat := ($Xfadeduration / $duration_current_master_event)
		$Xfadeduration_in_memory := (($Xfadeduration / $duration_current_master_event)*$beatduration_in_memory)
		$date_end_Xfade_in_memory := $date_end_segment_in_memory + $Xfadeduration_in_memory
		
		$voice := $activevoice							
		AnteToSVP $VoiceName output_audio 1
		AnteToSVP $VoiceName transpo $voice $transpo  
		
		$start_pos := $date_start_segment_in_memory + $audio_latency - $time_shift
		AnteToSVP $VoiceName beatScrubPos $voice $start_pos $speedratio ; new mode
		printAnte $VoiceName $VoiceName "AT " ($NOW*1000)  "ms, SENT TO PLAYER:" $voice $date_start_segment_in_memory $speedratio "beatduration:" $duration_current_master_event "nextbeatat?" (($NOW*1000)+$duration_current_master_event+$time_shift)
		;idx-in-memory-ratio $VoiceName $idx_start_play_in_memory_local $date_start_segment_in_memory $speedratio

		if (!$pulsed && $TimeMaster)
		{ 	
			printAnte $VoiceName $VoiceName ($NOW*1000) " : ::StartRenderEvent will signal_new_position (now " $signal_new_position  ") in " ($duration_current_master_event+$time_shift) " ms ..."
			($duration_current_master_event+$time_shift)ms $signal_new_position := (($position + 1) % $length_scenario)
			printAnte $VoiceName $VoiceName "... " ($NOW*1000) " : ::StartRenderEvent : signal_new_position = " $signal_new_position
		}
							
}


@proc_def ::UpdateSpeedRendering($VoiceName, $TimeMaster, $pulsed, $date_start_segment_in_memory, $date_end_segment_in_memory, $position, $tempo, $activevoice) 
	{

		@local $beatduration_in_memory, $speedratio
		@local $graincurvesduration_frac_beat, $graincurvesduration_in_memory, $Xfade_frac_beat, $Xfadeduration_in_memory, $date_end_Xfade_in_memory
		@local $voice, $output_audio
		@local $start_pos

		printAnte $VoiceName $VoiceName "UPDATE SPEED RENDERING POSITION " $position "(dates: " $date_start_segment_in_memory $date_end_segment_in_memory ")"

		;AnteToSVP $VoiceName transpo $transpo 

		;Current beat durations values
		$beatduration_in_memory := ($date_end_segment_in_memory - $date_start_segment_in_memory)
			if ($TimeMaster)
			{
				if($pulsed)
					{
						printAnte $VoiceName $VoiceName "$duration_current_master_event" $duration_current_master_event "-->" (60000/$tempo)
						$duration_current_master_event := 60000/$tempo
					}
				else {$duration_current_master_event := $beatduration_in_memory}
			}
			;faire un else pour temporalités multiples

		$speedratio := $beatduration_in_memory / $duration_current_master_event

		;Equivalent durations current tempo / tempo in the memory for Xfade
		$Xfade_frac_beat := ($Xfadeduration / $duration_current_master_event)
		$Xfadeduration_in_memory := (($Xfadeduration / $duration_current_master_event)*$beatduration_in_memory)
		$date_end_Xfade_in_memory := $date_end_segment_in_memory + $Xfadeduration_in_memory
		
		$voice := $activevoice							
		;AnteToSVP $VoiceName output_audio 1
		;AnteToSVP $VoiceName transpo $voice $transpo  
		
		;$start_pos := $date_start_segment_in_memory + $audio_latency - $time_shift
		AnteToSVP $VoiceName beatScrubPos $voice (-1) $speedratio ; new mode
		printAnte $VoiceName $VoiceName "AT " ($NOW*1000)  "ms, SENT TO PLAYER:" $voice "JUST change speed:" $speedratio  "nextbeatat?" (($NOW*1000)+$duration_current_master_event)
		;idx-in-memory-ratio $VoiceName $idx_start_play_in_memory_local $date_start_segment_in_memory $speedratio

		if (!$pulsed && $TimeMaster)
		{ 

			printAnte $VoiceName $VoiceName ($NOW*1000) " : ::UpdateSpeedRendering will signal_new_position (now " $signal_new_position ") in " ($duration_current_master_event) " ms ..."
			($duration_current_master_event)ms $signal_new_position := (($position + 1) % $length_scenario)
			printAnte $VoiceName $VoiceName "... " ($NOW*1000) " : ::UpdateSpeedRendering : signal_new_position = " $signal_new_position
			
		}
							
}


@proc_def ::StopRendering($VoiceName, $TimeMaster, $pulsed, $position, $activevoice, $time_shift) 
{
		@local $voice
		
		$voice := $activevoice							
		AnteToSVP $VoiceName beatScrubPos $voice (-1) 0 
		printAnte $VoiceName $VoiceName "AT " ($NOW*1000)  "ms, STOPPED VOICEplayer:" $voice "(speed:" 0  ") nextbeatat?" (($NOW*1000)+$duration_current_master_event)

		if (!$pulsed && $TimeMaster)
		{ 
			($duration_current_master_event+$time_shift)ms $signal_new_position := (($position + 1) % $length_scenario)
		}
							
}


;==================================================================================================================
;==================================================================================================================
; BLOC 3.2: DEFINITION OF THE GENERIC "VOICE" PROCESS
;==================================================================================================================
;==================================================================================================================
$pos_in_impro := -1

whenever ($pos_in_scenario == $pos_in_scenario)
{
	if (!$pulsed) ;; A CHANGER POUR MODULARISER LE whenever (new_date_seg_buf)
	{
		if ($first == 1) 
		{
			$pos_in_impro := $pos_in_scenario 
		} 
		else 
		{
			$pos_in_impro := $pos_in_impro + 1
		}
		$first := 0
		;idx-in-scenario-learning $pos_in_impro $pos_in_scenario $new_date_seg_buff
		pos_in_impro $pos_in_impro 
	}
}

@proc_def ::SetVoice($VoiceName, $InitSequenceImproOfVoice, $InitMemoryOfVoice, $TimeMaster) {

	@local $aux, $activevoice, $inactivevoice, $transpo, $start_Xfade, $old_idx_in_memory, $old_transpo
	@local $LoopBeat, $CurveBeat, $SequenceImproOfVoice, $MemoryOfVoice, $delay, $loop_count
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	@local $listened_variable
	@local $sync_variable, $synctempo
	@tempovar $sync_variable(120,1)
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	@local $play_pos
	@local $next_event_anticipated, $last_event_played
	@local $LoopBeat

	$LoopBeat := 0

	$SequenceImproOfVoice := $InitSequenceImproOfVoice
	$MemoryOfVoice := $InitMemoryOfVoice
	$delay := $audio_latency_online


	whenever ($synctempo == $synctempo)
	{
		let $sync_variable.tempo := $synctempo
	}

	whenever ($sync_variable == $sync_variable)
	{
		printAnte $VoiceName $VoiceName $VoiceName " !!! SYNC_VARIABLE UPDATED :" $sync_variable "!!! AT" ($NOW*1000)
	}


	$start_Xfade := 0
	$activevoice := 1
	$inactivevoice := 2

	whenever ($start_Xfade == 1)
	{
		printAnte $VoiceName $VoiceName " --------- DISC :" ($NOW*1000) " ---------"

		AnteToSVP $VoiceName disc $activevoice 0.0
		AnteToSVP $VoiceName disc $inactivevoice 1.0

		$aux := $activevoice 
		$activevoice := $inactivevoice
		$inactivevoice := $aux
	}
	AnteToSVP $VoiceName output_audio 0

	$play_pos := -1 ;0
	$transpo := 0
	$last_event_played := 0
	$next_event_anticipated := 0
	$old_idx_in_memory := -1
	$old_transpo := -1

	;PROBLEME : ON NE PEUT PAS ECRIRE DANS LA VARIABLE GLOBALE CHOISIE !!!!
	$loop_count := 0
	whenever($listened_variable == $listened_variable) ;@exclusive
	{
		@local $relative_count_loop_whenever, $first_iteration_loop

		$relative_count_loop_whenever := 0
		$first_iteration_loop := 1

		if ($TimeMaster)
		{
			$pos_in_scenario := $listened_variable
			; DONC IL FAUT ABSOLUMENT QUE LA SYNC VARIABLE D'UNE VOIX MASTER SOIT POS IN SCENARIO !!!
			; SINON N'EST PAS UPDATE ICI !!
			POSINSCENARIOBYANTE $pos_in_scenario
		}
		else
		{
			; BURGER
			;$sync_variable := $listened_variable
		}


		if (!$pulsed)
		{
			printAnte $VoiceName $VoiceName "SYNC WHENEVER" "AT " ($NOW*1000) $pos_in_scenario "LISTENED VARIABLE UPDATED POS_IN_SCENARIO AND PLAY_POS"
			$play_pos := $pos_in_scenario 	
		}
		else
		{

			printAnte $VoiceName $VoiceName "SYNC WHENEVER" "AT " ($NOW*1000) $sync_variable "LISTENED VARIABLE UPDATED sync_variable"
			$relative_count_loop_whenever := $relative_count_loop_whenever - 1
			$relative_count_loop_whenever := @max(0,$relative_count_loop_whenever)
			printAnte $VoiceName $VoiceName "SYNC WHENEVER" "$relative_count_loop_whenever" $relative_count_loop_whenever "..."

			if($relative_count_loop_whenever == 0)
			{

				printAnte $VoiceName $VoiceName "SYNC WHENEVER" "... ABORTING LOOP" $loop_count "AND LAUNCHING NEW LOOP" ($loop_count+1)
				abort $LoopBeat
				$first_iteration_loop := 1

				$loop_count := $loop_count + 1
				$LoopBeat :=
				{
					@local $idloop
					$idloop := $loop_count
					loop 1 @sync $sync_variable @target[3s] @conservative
					@abort { printAnte $VoiceName $VoiceName "!!!!!!!!!!!!!!! ABORT LOOP " $idloop }
					{
						if ($first_iteration_loop)
						{
							printAnte $VoiceName $VoiceName "SYNC WHENEVER" "Loop " $idloop ": " "AT " ($NOW*1000) $pos_in_scenario "PLAY POS FIRST ITERATION LOOP"
							printAnte $VoiceName $VoiceName "SYNC WHENEVER" "Loop " $idloop ":" "TEMPO sync_variable" ($sync_variable.tempo) " (associated duration:" (60000/($sync_variable.tempo)) " ms)"
							$play_pos := $sync_variable 
						}
						else
						{
							$relative_count_loop_whenever := $relative_count_loop_whenever + 1
							printAnte $VoiceName $VoiceName "SYNC WHENEVER" "Loop " $idloop ": " "AT " ($NOW*1000) (($play_pos + 1) % $length_scenario) "PLAY POS UPDATED BY LOOP"
							printAnte $VoiceName $VoiceName "SYNC WHENEVER" "Loop " $idloop ": " "TEMPO sync_variable" ($sync_variable.tempo) " (associated duration:" (60000/($sync_variable.tempo)) " ms)"
							printAnte $VoiceName $VoiceName "SYNC WHENEVER" "Loop " $idloop ": " "Count loop / whenever :" $relative_count_loop_whenever 

							$play_pos := (($play_pos + 1) % $length_scenario)
						}
						$first_iteration_loop := 0
					}

				}
			}
			else
			{
				;printAnte $VoiceName "SYNC WHENEVER" "LET LOOP " $idloop " RUNNING"
			}

		}

	}


	whenever ($play_pos == $play_pos)
	{

		@local $impro_segment
		@local $idx_to_play_in_memory
		@local $next_loop_idx, $next_impro_segment, $next_idx_to_play_in_memory, $next_transpo
		@local $jump_now, $jump_at_next_pos
		@local $start_segment_in_memory, $end_segment_in_memory, $testDEF, $date_start_segment_in_memory, $date_end_segment_in_memory


		printAnte $VoiceName $VoiceName "POSITION = " $play_pos ", LABEL = " ($Scenario($play_pos)) "(now = " ($NOW*1000) " ms)"
		printAnte $VoiceName $VoiceName "$sync_variable = " $sync_variable "tempo = " ($sync_variable.tempo) "// $pos_in_impro :" $pos_in_impro
	
		; Retrieve the data to play at this position
		$impro_segment := $SequenceImproOfVoice($play_pos)
		$idx_to_play_in_memory := $impro_segment[0]
		$transpo := $impro_segment[1]
		; Retrieve the data to play at next position
		$next_impro_segment := $SequenceImproOfVoice($play_pos+1) ;TODO MODULO POUR RETOURNER AU DEBUT
		$next_idx_to_play_in_memory := $next_impro_segment[0]
		$next_transpo := $next_impro_segment[1]
	
		; Update for next time
		$old_idx_in_memory := $idx_to_play_in_memory
		$old_transpo := $transpo
		
		printAnte $VoiceName $VoiceName "PLAY WHENEVER" "$impro_segment :" $impro_segment
		printAnte $VoiceName $VoiceName "PLAY WHENEVER" "$next_impro_segment :" $next_impro_segment

		;---------------
		; CURRENT EVENT
		;---------------
		printAnte $VoiceName $VoiceName "------------- WORKING ON CURRENT EVENT"
		if (@is_undef($idx_to_play_in_memory)) ;;; IMPOSSIBLE TO PLAY CURRENT EVENT
		{	

			printAnte $VoiceName $VoiceName "NOTHING NOW : Index to play in memory undefined"
			;LAST BURGER
			$start_Xfade := 1;LB
			::StopRendering($VoiceName, $TimeMaster, $pulsed, $play_pos, $activevoice, 0)
			($Xfadeduration/2) AnteToSVP $VoiceName output_audio 0;DELAY LB
			$last_event_played := 0

		}
		else ;;; CURRENT EVENT IS DEFINED
		{
			idx_in_memory $VoiceName $idx_to_play_in_memory
			printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "$idx_to_play_in_memory :" $idx_to_play_in_memory 
			printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "$impro_segment :" $impro_segment

			$jump_now := ($first || !$last_event_played || !$next_event_anticipated)
			printAnte $VoiceName $VoiceName "PLAY WHENEVER"   "JUMP NOW: " $jump_now "<-- $first :" $first "!$last_event_played" (!$last_event_played) "!$next_event_anticipated" (!$next_event_anticipated)
			
			;AnteToSVP $VoiceName transpo $transpo 
			$start_segment_in_memory := $MemoryOfVoice($idx_to_play_in_memory)
			$end_segment_in_memory := $MemoryOfVoice($idx_to_play_in_memory + 1)
			$testDEF := (!(@is_undef($start_segment_in_memory)) && !(@is_undef($end_segment_in_memory)))

			if($jump_now) ;;; DISCONTINUITY HANDLED NOW
			{
						
				
				if (!$testDEF )	
				{
					printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "FINALLY NOTHING NOW : Segment in the memory at this index is undefined"
					::StopRendering($VoiceName, $TimeMaster, $pulsed, $play_pos, $activevoice, 0)
					AnteToSVP $VoiceName output_audio 0
					$last_event_played := 0
				} 
				else 
				{
					$date_start_segment_in_memory := $start_segment_in_memory[0]
					$date_end_segment_in_memory := $end_segment_in_memory[0] - 1
					printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "XFADE NOW:" ($NOW*1000)	
					$start_Xfade := 1
					::StartRenderEvent($VoiceName, $TimeMaster, $pulsed, $date_start_segment_in_memory, $date_end_segment_in_memory, $transpo, $play_pos, ($sync_variable.tempo), $activevoice, $delay, 0)
					$last_event_played := 1		
				}

			}; end "if($jump_now)"
			
			else ;;; CONTINUOUS NOW
			{
				printAnte $VoiceName "PLAY WHENEVER"   "CONTINUOUS"
				$date_start_segment_in_memory := $start_segment_in_memory[0]
				$date_end_segment_in_memory := $end_segment_in_memory[0] - 1
				::UpdateSpeedRendering($VoiceName, $TimeMaster, $pulsed, $date_start_segment_in_memory, $date_end_segment_in_memory, $play_pos, ($sync_variable.tempo), $activevoice)
				$last_event_played := 1
			}

		};end "else @is_undef($idx_to_play_in_memory)""


		;---------------
		; NEXT EVENT
		;---------------
		printAnte $VoiceName $VoiceName "------------- WORKING ON NEXT EVENT"
		if (@is_undef($next_idx_to_play_in_memory)) ;;; NEXT EVENT : UNKNOWN
		{	

			printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "NOTHING FOR NEXT EVENT : Index to play in memory undefined"
			$next_event_anticipated := 0

		}
		else ;;; NEXT EVENT IS DEFINED
		{

			printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "$next_idx_to_play_in_memory :" $next_idx_to_play_in_memory 
			printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "$next_impro_segment :" $impro_segment

			$jump_at_next_pos := (@is_undef($idx_to_play_in_memory) || $idx_to_play_in_memory != ($next_idx_to_play_in_memory -1) || $transpo != $next_transpo)
			printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "JUMP AT NEXT POSITION: " $jump_at_next_pos "<-- NOW IDX UNDEF / NEXT DEF :" (@is_undef($idx_to_play_in_memory)) " NON CONSECUTIVE :" ($idx_to_play_in_memory != ($next_idx_to_play_in_memory -1)) "TRANSPO CHANGE:" ($transpo != $next_transpo) 

			$start_segment_in_memory := $MemoryOfVoice($next_idx_to_play_in_memory)
			$end_segment_in_memory := $MemoryOfVoice($next_idx_to_play_in_memory + 1)
			$transpo := $next_transpo ;NEW 11 AVRIL 2017

			if($jump_at_next_pos) ;;; DISCONTINUITY HANDLED AT NEXT EVENT
			{
				
				
				$testDEF := (!(@is_undef($start_segment_in_memory)) && !(@is_undef($end_segment_in_memory)))

				if (!$testDEF )	
				{
					printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "FINALLY NOTHING FOR NEXT EVENT : Segment in the memory at this index is undefined"
					$next_event_anticipated := 0
				} 
				else 
				{
					$date_start_segment_in_memory := $start_segment_in_memory[0]
					$date_end_segment_in_memory := $end_segment_in_memory[0] - 1
					$next_event_anticipated := 1
					printAnte $VoiceName $VoiceName "PLAY WHENEVER"  "XFADE in " ($duration_current_master_event - ($Xfadeduration/2)) "ms ... (at " (($NOW*1000) + ($duration_current_master_event - ($Xfadeduration/2))) ")"
					($duration_current_master_event - ($Xfadeduration/2))ms group {
																					$start_Xfade := 1
																					::StartRenderEvent($VoiceName, $TimeMaster, $pulsed, $date_start_segment_in_memory, $date_end_segment_in_memory, $transpo, ($play_pos + 1), ($sync_variable.tempo), $activevoice, $delay, ($Xfadeduration/2))		
																			}
					
					
				}

			}; end "if($jump_at_next_pos)"
			
			else ;;; CONTINUOUS AT NEXT EVENT
			{
				; BURGER FINALE
				$next_event_anticipated := 1
			}

		};end "else @is_undef($next_idx_to_play_in_memory)"
	}
}



;==================================================================================================================
;==================================================================================================================
; BLOC 4: HANDLING START / STOP IMPRO
; INITIALISATION OF THE VOICES
;==================================================================================================================
;==================================================================================================================
whenever ($play == 1)
{ 
	@local $cpt

	printAnte global "_________PLAY : ON_________"

if ($last_length_scenario !=0) {
	$Scenario := MAP{}
	$SequenceImpro1 := MAP{}
	$SequenceImpro2 := MAP{}
	$SequenceImpro3 := MAP{} ; Each musical slice in the MAP : tab [idx to play in the memory, transposition]
	;$length_scenario := $length_scenario	

	$cpt := 0
	loop BuildSequences 0
		{
			; Default "impro"
			$SequenceImpro1 := @add_pair($SequenceImpro1,$cpt, tab[($cpt - 4),0])
			$SequenceImpro2 := @add_pair($SequenceImpro2,$cpt, tab[($cpt - 4),0])
			$SequenceImpro3 := @add_pair($SequenceImpro3,$cpt, tab[($cpt - 4),0])
			; Default scenario
			$Scenario := @add_pair($Scenario,$cpt, "label")

			$cpt := $cpt + 1
		} until ( $cpt >= $last_length_scenario)
	if ($printimproinfo) 
		{
			printAnte global "______Default sequences built again______"
			printAnte global "$Scenario :" $Scenario 
			printAnte global "$SequenceImpro :" $SequenceImpro
		}
	}


	;::SetVoice($VoiceName, $InitSequenceImproOfVoice, $InitMemoryOfVoice, $TimeMaster)
	$currentVoice1 := ::SetVoice("Voice1", $SequenceImpro1, $online_memory, 1)
	;Synchronizing Voice 1 with the temporal variable "$pos_in_scenario"
	whenever($signal_new_position == $signal_new_position)
	{
		$currentVoice1.$listened_variable := $signal_new_position
	}
	whenever($pos_in_scenario == $pos_in_scenario )
	{
		$currentVoice1.$sync_variable := $pos_in_scenario
	}
	whenever ($tempovar_pos_in_scenario)
	{
		let $currentVoice1.$synctempo := $tempovar_pos_in_scenario
	}	
	$currentVoice1.$delay := $audio_latency_online


	$currentVoice2 := ::SetVoice("Voice2", $SequenceImpro2, $online_memory, 0)
	;;Synchronizing Voice 2 with the temporal variable "$pos_to_play"
	whenever($pos_in_scenario == $pos_in_scenario)
	{
		$currentVoice2.$listened_variable := $pos_in_scenario
	}
	whenever($pos_to_play == $pos_to_play)
	{
		$currentVoice2.$sync_variable := $pos_to_play
	}
	whenever ($tempovar_pos_to_play)
	{
		let $currentVoice2.$synctempo := $tempovar_pos_to_play
	}
	$currentVoice2.$delay := $audio_latency_online


	$currentVoice3 := ::SetVoice("Voice3", $SequenceImpro3, $online_memory, 0) 
	;Synchronizing Voice 3 with the temporal variable "$pos_to_play"
	whenever($pos_in_scenario == $pos_in_scenario)
	{
		$currentVoice3.$listened_variable := $pos_in_scenario
	}
	whenever($pos_to_play == $pos_to_play)
	{
		$currentVoice3.$sync_variable := $pos_to_play
	}
	whenever ($tempovar_pos_to_play)
	{
		let $currentVoice3.$synctempo := $tempovar_pos_to_play
	}
	$currentVoice3.$delay := $audio_latency_online 

	if ($printimproinfo) 
		{
			printAnte global "______Processes launched______"
			printAnte global "$Scenario :" $Scenario 
			printAnte global "$SequenceImpro :" $SequenceImpro
		}

}

whenever ($play == 0)
{ 

	printAnte global "_________PLAY : OFF_________"


	AnteToSVP "Voice1" output_audio 0
	AnteToSVP "Voice2" output_audio 0
	AnteToSVP "Voice3" output_audio 0
	
	abort $currentVoice1
	abort $currentVoice2
	abort $currentVoice3


	if ($printimproinfo) 
		{
			printAnte global "______Processes aborted______"
		}


}



$date_beginning_buffer := -1
whenever ($startrecordbuffer)
{
	$date_beginning_buffer := $NOW

}

;------------------------------------------------------------------
; ONLINE SEGMENTATION OF THE INPUTS (AUDIO OR NOT...)
;----------------------
; segmented_memory  
; key -> data :
; position in impro -> [date in the buffer, label, position in the scenario]
;----------------------
$first := 1
$new_date_seg_buff := -1
$pos_in_scenario := -1
$pos_to_play := 0
;---

whenever ($new_posinscenario_datesegbuff)
{
	
	if ($pulsed)
	{
		;-VERSIONSANSTRANSPORT
		if ($date_beginning_buffer > -1) {
			$new_date_seg_buff := ($NOW - $date_beginning_buffer)*1000
		} else {
			$new_date_seg_buff := -1
		}

		$new_pos_in_scenario := $new_posinscenario_datesegbuff[0]
		printAnte Voice1 "\n\n\n"
		printAnte Voice1 "\n\n\n"
		printAnte Voice1 " --------- NEW POS SIGNALED BY BANG" $new_pos_in_scenario " ---------" ($NOW*1000)
		printAnte global " --------- NEW POS SIGNALED LAUNCHED BY BANG" $new_pos_in_scenario " ---------" ($NOW*1000) 

		;;;;;;;;;;;;;;;;;  30/01/17 : "pos_in_scenario remplacé par $signal_new_position"
		

		
		if ($first == 1) {
			$pos_in_impro := $new_pos_in_scenario 
			abs_rec_start $new_date_seg_buff ; gn 160607
		} else {
			$pos_in_impro := $pos_in_impro + 1
		}

		$signal_new_position := $new_pos_in_scenario
		POSINSCENARIOBYANTE $signal_new_position
		idx-in-scenario-learning $signal_new_position

		$first := 0
		idx-in-scenario-learning $pos_in_impro $pos_in_scenario $new_date_seg_buff
		pos_in_impro $pos_in_impro 

		
		/*Convention : tab [posinscenario, datesegbuff], 
		with datesegbuff = -1 when offline (no online buffer to segment)*/
		if ($new_date_seg_buff > -1) {
			;$label_new_pos := $Scenario[$new_pos_in_scenario]
			$label_new_pos := $Scenario($new_pos_in_scenario)
		
			$new_segment := tab[$new_date_seg_buff, $label_new_pos, $new_pos_in_scenario]

			$online_memory := @add_pair($online_memory,$pos_in_impro,$new_segment)
			
			printAnte global "RECORDING SEGMENT [" $new_segment "]  POUR POS_IN_IMPRO " $pos_in_impro
		}
	}
	
}





;==================================================================================================================
;==================================================================================================================
; BLOC 5: HANDLING MEMORY (LOAD AND SAVE)
;==================================================================================================================
;==================================================================================================================
@proc_def SendMap($m, $slot, $idxInTab)
{
	$i := 0
	$s := ""
	forall $k, $v in $m 
	{	
		if ($idxInTab > -1) 
		{
			if ($idxInTab == 1) 
			{
				$s:= $s+(" "+"\""+($v[$idxInTab])+"\"")
			} 
			else 
			{
				$s:= $s+(" "+($v[$idxInTab]))
			}
		} 
		else 
		{
			$s:= $s+(" "+($v))
		}
	
		AnteToSave (""+$slot) $s
	}
}

whenever ($save_annotations)
{
	::SendMap($online_memory,"labels",1)
	::SendMap($online_memory,"dates",0)
	::SendMap($online_memory,"pos_in_scenario",2)	
	AnteToSave "last_temposession" $tempovar_pos_to_play
	$play := 0
}

;LOAD MEMORY 1
;==================================================================================================================
$cpt_load_memory_Voice1 := 0
$next_pos_to_load_in_memory_Voice1 := 0

$load_pos_in_scenario_Voice1 := tab[]
whenever ($load_pos_in_scenario_Voice1)
{
	$cpt_load_memory_Voice1 := $cpt_load_memory_Voice1 + 1
	printAnte Voice1 "LOADED $load_pos_in_scenario Voice1" 
	
}
$load_labels_Voice1 := tab[]
whenever ($load_labels_Voice1)
{
	$cpt_load_memory_Voice1 := $cpt_load_memory_Voice1 + 1
	printAnte Voice1  "LOADED $load_labels Voice1"
}

$load_dates_Voice1 := tab[]
whenever ($load_dates_Voice1)
{
	$cpt_load_memory_Voice1 := $cpt_load_memory_Voice1 + 1
	printAnte Voice1  "LOADED $load_dates Voice1"
}

whenever ($cpt_load_memory_Voice1 == 3)
{
	@local $posi, $p
	
	$loaded_memory_Voice1 := MAP{}

	$currentVoice1.$delay := $audio_latency_offline

	$posi := $next_pos_to_load_in_memory_Voice1
	forall $p in $load_pos_in_scenario_Voice1
	{
		$loaded_memory_segment_Voice1 := tab[($load_dates_Voice1[($posi - $next_pos_to_load_in_memory_Voice1)]), ($load_labels_Voice1[($posi - $next_pos_to_load_in_memory_Voice1)]), $p]
		$loaded_memory_Voice1 := @add_pair($loaded_memory_Voice1,$posi,$loaded_memory_segment_Voice1)
		$posi := $posi + 1
	}

	;$next_pos_to_load_in_memory_Voice1 := $posi
	$next_pos_to_load_in_memory_Voice1 := 0

	$currentVoice1.$MemoryOfVoice := $loaded_memory_Voice1
		
	$cpt_load_memory_Voice1 := 0

	printAnte Voice1 "MEMORY Voice1 LOADED" ($currentVoice1.$MemoryOfVoice)

}
;LOAD MEMORY 2
;==================================================================================================================
$cpt_load_memory_Voice2 := 0
$next_pos_to_load_in_memory_Voice2 := 0
$load_pos_in_scenario_Voice2 := tab[]
whenever ($load_pos_in_scenario_Voice2)
{
	$cpt_load_memory_Voice2 := $cpt_load_memory_Voice2 + 1
	printAnte Voice2 "LOADED $load_pos_in_scenario Voice2"
	
}
$load_labels_Voice2 := tab[]
whenever ($load_labels_Voice2)
{
	$cpt_load_memory_Voice2 := $cpt_load_memory_Voice2 + 1
	printAnte Voice2 "LOADED $load_labels Voice2"
}

$load_dates_Voice2 := tab[]
whenever ($load_dates_Voice2)
{
	$cpt_load_memory_Voice2 := $cpt_load_memory_Voice2 + 1
	printAnte Voice2 "LOADED $load_dates Voice2"
}
whenever ($cpt_load_memory_Voice2 == 3)
{
	@local $posi, $p
	
	$loaded_memory_Voice2 := MAP{}
	
	$currentVoice2.$delay := $audio_latency_offline ;TRIIIICK : mettre online

	$posi := $next_pos_to_load_in_memory_Voice2
	forall $p in $load_pos_in_scenario_Voice2
	{
		$loaded_memory_segment_Voice2 := tab[($load_dates_Voice2[($posi - $next_pos_to_load_in_memory_Voice2)]), ($load_labels_Voice2[($posi - $next_pos_to_load_in_memory_Voice2)]), $p]
		$loaded_memory_Voice2 := @add_pair($loaded_memory_Voice2,$posi,$loaded_memory_segment_Voice2)
		$posi := $posi + 1
	}

	;$next_pos_to_load_in_memory_Voice1 := $posi
	$next_pos_to_load_in_memory_Voice2 := 0

	$currentVoice2.$MemoryOfVoice := $loaded_memory_Voice2
		
	$cpt_load_memory_Voice2 := 0

	printAnte Voice2 "MEMORY Voice2 LOADED" ($currentVoice2.$MemoryOfVoice)

}
;LOAD MEMORY 3
;==================================================================================================================
$cpt_load_memory_Voice3 := 0
$next_pos_to_load_in_memory_Voice3 := 0

$load_pos_in_scenario_Voice3 := tab[]
whenever ($load_pos_in_scenario_Voice3)
{
	$cpt_load_memory_Voice3 := $cpt_load_memory_Voice3 + 1
	printAnte Voice3 "LOADED $load_pos_in_scenario Voice3"
	
}
$load_labels_Voice3 := tab[]
whenever ($load_labels_Voice3)
{
	$cpt_load_memory_Voice3 := $cpt_load_memory_Voice3 + 1
	printAnte Voice3 "LOADED $load_labels Voice3"
}

$load_dates_Voice3 := tab[]
whenever ($load_dates_Voice3)
{
	$cpt_load_memory_Voice3 := $cpt_load_memory_Voice3 + 1
	printAnte Voice3 "LOADED $load_dates Voice3"
}
whenever ($cpt_load_memory_Voice3 == 3)
{
	@local $posi, $p
	
	$loaded_memory_Voice3 := MAP{}

	$currentVoice3.$delay := $audio_latency_offline;TRIIIICK : mettre online

	$posi := $next_pos_to_load_in_memory_Voice3
	forall $p in $load_pos_in_scenario_Voice3
	{
		$loaded_memory_segment_Voice3 := tab[($load_dates_Voice3[($posi - $next_pos_to_load_in_memory_Voice3)]), ($load_labels_Voice3[($posi - $next_pos_to_load_in_memory_Voice3)]), $p]
		$loaded_memory_Voice3 := @add_pair($loaded_memory_Voice3,$posi,$loaded_memory_segment_Voice3)
		$posi := $posi + 1
	}

	;$next_pos_to_load_in_memory_Voice1 := $posi
	$next_pos_to_load_in_memory_Voice3 := 0

	$currentVoice3.$MemoryOfVoice := $loaded_memory_Voice3
		
	$cpt_load_memory_Voice3 := 0

	printAnte Voice3 "MEMORY Voice3 LOADED" ($currentVoice3.$MemoryOfVoice)

}






;==================================================================================================================
;==================================================================================================================
; BLOC 6: HANDLING SCENARIOS AND IMPROS (SAVE AND LOAD)
;==================================================================================================================
;==================================================================================================================
whenever ($ModifScenario0)
{

printAnte global "PREVIOUS SCENARIO :" $Scenario

	forall $k, $v in $ModifScenario0 {
			$Scenario := @add_pair($Scenario,$k, $v)
		
	}

printAnte global "NEW SCENARIO :" $Scenario

}
whenever ($ModifSequenceImproOfVoice1)
{

printAnte Voice1 "VOICE 1 : PREVIOUS IMPRO :" $currentVoice1.$SequenceImproOfVoice

	forall $k, $v in $ModifSequenceImproOfVoice1 {
			$currentVoice1.$SequenceImproOfVoice := @add_pair(($currentVoice1.$SequenceImproOfVoice),$k, $v)
		
	}

printAnte Voice1 "VOICE 1 : NEW IMPRO :" $currentVoice1.$SequenceImproOfVoice

}
whenever ($ModifSequenceImproOfVoice2)
{

printAnte Voice2 "VOICE 2 : PREVIOUS IMPRO :" $currentVoice2.$SequenceImproOfVoice

	forall $k, $v in $ModifSequenceImproOfVoice2 {
			$currentVoice2.$SequenceImproOfVoice := @add_pair(($currentVoice2.$SequenceImproOfVoice),$k, $v)
		
	}

printAnte Voice2 "VOICE 2 : NEW IMPRO :" $currentVoice2.$SequenceImproOfVoice

}
whenever ($ModifSequenceImproOfVoice3)
{

printAnte Voice3 "VOICE 3 : PREVIOUS IMPRO :" $currentVoice3.$SequenceImproOfVoice

	forall $k, $v in $ModifSequenceImproOfVoice3 {
			$currentVoice3.$SequenceImproOfVoice := @add_pair(($currentVoice3.$SequenceImproOfVoice),$k, $v)
		
	}

printAnte Voice3 "VOICE 3 : NEW IMPRO :" $currentVoice3.$SequenceImproOfVoice
}